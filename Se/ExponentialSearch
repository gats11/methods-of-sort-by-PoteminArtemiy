def exponential_search(arr, target):
    """
    Экспоненциальный поиск
    Временная сложность: O(log n)
    """
    n = len(arr)
    if n == 0:
        return -1
    
    # Проверяем первый элемент
    if arr[0] == target:
        return 0
    
    # Экспоненциально расширяем диапазон
    i = 1
    print("Экспоненциальное расширение диапазона:")
    while i < n and arr[i] <= target:
        print(f"Граница расширена до индекса {i} (элемент {arr[i]})")
        i *= 2
    
    # Бинарный поиск в найденном диапазоне
    low = i // 2
    high = min(i, n - 1)
    print(f"Бинарный поиск в диапазоне [{low}, {high}]")
    
    return binary_search(arr, target, low, high)

def binary_search(arr, target, low, high):
    """Вспомогательная функция: бинарный поиск"""
    while low <= high:
        mid = (low + high) // 2
        print(f"Проверка элемента {arr[mid]} на позиции {mid}")
        
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return -1

# Демонстрация работы
if __name__ == "__main__":
    sorted_array = [2, 5, 8, 12, 16, 23, 38, 45, 67, 89, 91]
    target = 23
    print("Экспоненциальный поиск:")
    print(f"Массив: {sorted_array}")
    print(f"Искомый элемент: {target}")
    
    result = exponential_search(sorted_array, target)
    if result != -1:
        print(f"Элемент найден на позиции: {result}")
    else:
        print("Элемент не найден")
"""
Результат:
Экспоненциальный поиск:
Массив: [2, 5, 8, 12, 16, 23, 38, 45, 67, 89, 91]
Искомый элемент: 23
Экспоненциальное расширение диапазона:
Граница расширена до индекса 1 (элемент 5)
Граница расширена до индекса 2 (элемент 8)
Граница расширена до индекса 4 (элемент 16)
Бинарный поиск в диапазоне [4, 8]
Проверка элемента 38 на позиции 6
Проверка элемента 16 на позиции 4
Проверка элемента 23 на позиции 5
Элемент найден на позиции: 5
"""
