def bucket_sort(arr):
    """
    Блочная (корзинная) сортировка
    Временная сложность: O(n + k) в лучшем случае
    """
    if len(arr) == 0:
        return arr
    
    # Определяем количество корзин
    num_buckets = len(arr)
    min_val, max_val = min(arr), max(arr)
    
    # Если все элементы одинаковые, возвращаем исходный массив
    if min_val == max_val:
        return arr
    
    bucket_range = (max_val - min_val) / num_buckets
    
    # Создаем корзины
    buckets = [[] for _ in range(num_buckets)]
    
    # Распределяем элементы по корзинам
    for num in arr:
        index = int((num - min_val) / bucket_range)
        if index == num_buckets:  # Обработка граничного случая
            index -= 1
        buckets[index].append(num)
    
    # Сортируем каждую корзину и объединяем
    result = []
    for bucket in buckets:
        # Используем сортировку вставками для небольших корзин
        insertion_sort(bucket)
        result.extend(bucket)
    
    return result

def insertion_sort(arr):
    """Вспомогательная функция: сортировка вставками"""
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key

# Демонстрация работы
if __name__ == "__main__":
    test_array = [0.42, 0.32, 0.33, 0.52, 0.37, 0.47, 0.51]
    print("Блочная сортировка:")
    print(f"Исходный массив: {test_array}")
    sorted_array = bucket_sort(test_array)
    print(f"Отсортированный массив: {sorted_array}")
#Результат:
#Блочная сортировка:
#Исходный массив: [0.42, 0.32, 0.33, 0.52, 0.37, 0.47, 0.51]
#Отсортированный массив: [0.32, 0.33, 0.37, 0.42, 0.47, 0.51, 0.52]
